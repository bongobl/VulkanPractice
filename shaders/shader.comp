#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WIDTH 3200
#define HEIGHT 2400
#define WORKGROUP_SIZE 32

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

struct Pixel{
  vec4 value;
};

layout(std140, binding = 0) buffer buf
{
   Pixel imageData[];
};

layout(binding = 1) uniform UniformBufferObject
{
  float brightness;
  float colorR;
  float colorG;
  float colorB;

}ubo;


void main() {


  //In order to fit the work into workgroups, some unnecessary threads are launched.
  //We terminate those threads here. 
  if(gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT){
    return;
  }

  float x = float(gl_GlobalInvocationID.x) / float(WIDTH);
  float y = float(gl_GlobalInvocationID.y) / float(HEIGHT);

  

  vec3 color = vec3(ubo.colorR, ubo.colorG, ubo.colorB);

  float aspectRatio = float(WIDTH) / HEIGHT;

  vec2 fromCenter = vec2(x,y) - vec2(0.5f,0.5f);
  fromCenter.x = fromCenter.x * aspectRatio;
  
  if( pow(fromCenter.x,2) / pow(0.45f,2) + pow(fromCenter.y,2) / pow(0.3f,2) > 1  ){
    color = vec3(0,0,0);
  }

  int imageIndex = int(WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x);
  imageData[imageIndex].value = vec4(ubo.brightness * color,1);
  
  //vec4 temps = imageData[imageIndex].value;
  //imageData[imageIndex].value = temps;
}