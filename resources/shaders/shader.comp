#version 450
#extension GL_ARB_separate_shader_objects : enable

#define 	PI 	3.14159265358979323846
#define 	E	2.7182818284

#define 	WORKGROUP_SIZE 	32

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

struct Color{
  vec4 value;
};

//BINDING 0
layout(binding = 0) uniform sampler2D texSampler;

//BINDING 1
layout(std140, binding = 1) uniform UniformBufferObject
{
  
	vec4 color;

	uint width;
	uint height;
	float saturation;
	int blur;

}ubo;

//BINDING 2
layout(std140, binding = 2) buffer buf2
{
   Color outputImageData[];
};


vec4 lerp(vec4 first, vec4 second, float param){
	return (1.0 - param) * first + param * second;
}

vec4 clamp_0_255(vec4 raw){
	vec4 retVal = raw;

	if(retVal.r > 255)	retVal.r = 255;
	if(retVal.r < 0) retVal.r = 0;
	if(retVal.g > 255)	retVal.g = 255;
	if(retVal.g < 0) retVal.g = 0;
	if(retVal.b > 255)	retVal.b = 255;
	if(retVal.b < 0) retVal.b = 0;
	if(retVal.a > 255)	retVal.a = 255;
	if(retVal.a < 0) retVal.a = 0;

	return retVal;
}

float gaussKernel(int x, int n) {

	float sigma = floor(n / 2.0) / 2.0;
	float base = 1.0 / (sqrt(2.0 * PI) * sigma);
	float exp = -(x * x) / (2.0 * sigma * sigma);
	return base * pow(E, exp);
}


vec4 saturate(vec4 raw, float saturation){

	float averageLum = (raw.r + raw.g + raw.b) / 3.0f;
	vec4 grayScale = vec4(averageLum, averageLum, averageLum, raw.a);
	return lerp(grayScale, raw, saturation);
}
void main() {


	//In order to fit the work into workgroups, some unnecessary threads are launched.
	//We terminate those threads here. 
	if(gl_GlobalInvocationID.x >= ubo.width || gl_GlobalInvocationID.y >= ubo.height){
		return;
	}

	//get image coordinates in range 0-1
	float x = float(gl_GlobalInvocationID.x) / float(ubo.width);
	float y = float(gl_GlobalInvocationID.y) / float(ubo.height);


	int a = int(gl_GlobalInvocationID.x);
	int b = int(gl_GlobalInvocationID.y);
	
	//sample input image
	outputImageData[b * ubo.width + a].value = texture(texSampler,vec2(x,y)) * vec4(255,255,255,255);


	//saturation
	outputImageData[b * ubo.width + a].value = saturate(ubo.color * outputImageData[b * ubo.width + a].value, ubo.saturation);

	//check 0 - 255 bounds of final color value
	outputImageData[b * ubo.width + a].value = clamp_0_255(outputImageData[b * ubo.width + a].value);

}

