#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

struct Pixel{
  vec4 value;
};

layout(std140, binding = 0) buffer buf
{
   Pixel imageData[];
};

layout(std140, binding = 1) uniform UniformBufferObject
{
  
  uint colorR;
  uint colorG;
  uint colorB;
  uint alpha;


  uint width;
  uint height;
  uint padding1;
  uint padding2;

}ubo;


void main() {


  //In order to fit the work into workgroups, some unnecessary threads are launched.
  //We terminate those threads here. 
  if(gl_GlobalInvocationID.x >= ubo.width || gl_GlobalInvocationID.y >= ubo.height){
    return;
  }

  float x = float(gl_GlobalInvocationID.x) / float(ubo.width);
  float y = float(gl_GlobalInvocationID.y) / float(ubo.height);

  

  vec4 color = vec4(ubo.colorR, ubo.colorG, ubo.colorB, ubo.alpha);

  float aspectRatio = float(ubo.width) / ubo.height;

  vec2 fromCenter = vec2(x,y) - vec2(0.5f,0.5f);
  fromCenter.x = fromCenter.x * aspectRatio;
  
  if( pow(fromCenter.x,2) / pow(0.45f,2) + pow(fromCenter.y,2) / pow(0.3f,2) > 1  ){
    color.a = 0;
  }

  int imageIndex = int(ubo.width * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x);
  imageData[imageIndex].value = color;
  
  //vec4 temps = imageData[imageIndex].value;

  //imageData[imageIndex].value = temps;
  //imageData[imageIndex].value.g = temps.r;
  //imageData[imageIndex].value.r = temps.g;
}