#version 450
#extension GL_ARB_separate_shader_objects : enable

#define 	PI 	3.14159265358979323846
#define 	E	2.7182818284

#define 	WORKGROUP_SIZE 	32

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

struct Color{
  vec4 value;
};

//BINDING 0
layout (binding = 0, rgba8) uniform image2D inputImage;



//BINDING 1
layout(std140, binding = 1) uniform UniformBufferObject
{
  
	vec4 color;

	uint width;
	uint height;
	float saturation;
	int blur;

}ubo;

//BINDING 2
layout(std140, binding = 2) buffer buf2
{
   Color outputImageData[];
};

//BINDING 3
layout (binding = 3, rgba8) uniform image2D outputImage;


vec4 lerp(vec4 first, vec4 second, float param){
	return (1.0 - param) * first + param * second;
}

vec4 clamp_0_1(vec4 raw){
	vec4 retVal = raw;

	if(retVal.r > 1)	retVal.r = 1;
	if(retVal.r < 0) retVal.r = 0;
	if(retVal.g > 1)	retVal.g = 1;
	if(retVal.g < 0) retVal.g = 0;
	if(retVal.b > 1)	retVal.b = 1;
	if(retVal.b < 0) retVal.b = 0;
	if(retVal.a > 1)	retVal.a = 1;
	if(retVal.a < 0) retVal.a = 0;

	return retVal;
}

float gaussKernel(int x, int n) {

	float sigma = floor(n / 2.0) / 2.0;
	float base = 1.0 / (sqrt(2.0 * PI) * sigma);
	float exp = -(x * x) / (2.0 * sigma * sigma);
	return base * pow(E, exp);
}

vec4 GetPixelWrapped(int x, int y) {


	if (x >= ubo.width) { x -= int(ubo.width); }
	if (y >= ubo.height) { y -= int(ubo.height); }
	if (x < 0) { x += int(ubo.width); }
	if (y < 0) { y += int(ubo.height); }

	return imageLoad(inputImage, ivec2(x, y));
}

vec4 saturate(vec4 raw, float saturation){

	float averageLum = (raw.r + raw.g + raw.b) / 3.0f;
	vec4 grayScale = vec4(averageLum, averageLum, averageLum, raw.a);
	return lerp(grayScale, raw, saturation);
}
void main() {


	//In order to fit the work into workgroups, some unnecessary threads are launched.
	//We terminate those threads here. 
	if(gl_GlobalInvocationID.x >= ubo.width || gl_GlobalInvocationID.y >= ubo.height){
		return;
	}

	//get image coordinates in range 0-1
	float x = float(gl_GlobalInvocationID.x) / float(ubo.width);
	float y = float(gl_GlobalInvocationID.y) / float(ubo.height);

	//get image coordinates
	int a = int(gl_GlobalInvocationID.x);
	int b = int(gl_GlobalInvocationID.y);
	

	int n = ubo.blur;

	//error check
	if (n < 3) {
		n = 3;
	}
	if (n % 2 == 0) {
		n += 1;
	}

	int radius = int(floor(n / 2));
	float runningSumR = 0, runningSumG = 0, runningSumB = 0, runningSumAlpha = 0;
	float runningGauss = 0;


	//iterate over window
	for (int y = b - radius; y <= b + radius; ++y) {
		for (int x = a - radius; x <= a + radius; ++x) {

			float gaussCoeff = gaussKernel(x - a, n) * gaussKernel(y - b, n);
			runningGauss += gaussCoeff;

			runningSumR += gaussCoeff * GetPixelWrapped(x, y).r;
			runningSumG += gaussCoeff * GetPixelWrapped(x, y).g;
			runningSumB += gaussCoeff * GetPixelWrapped(x, y).b;
			runningSumAlpha += gaussCoeff * GetPixelWrapped(x, y).a;
		}
	}
	vec4 colorValue  = 
		vec4(runningSumR/runningGauss, runningSumG/runningGauss, runningSumB/runningGauss, runningSumAlpha/runningGauss);


	//sample input image
	//vec4 colorValue = imageLoad(inputImage, ivec2(a, b));

	//saturation
	colorValue = saturate(ubo.color * colorValue, ubo.saturation);

	//check 0 - 1 bounds of final color value
	colorValue = clamp_0_1(colorValue);

	//test output Image
	imageStore(outputImage, ivec2(a,b), colorValue);

}

